// Code generated by goctl. DO NOT EDIT!
// Source: userOrder.proto

package userorder

import (
	"context"

	"github.com/GitSorcerer/go-zero-stu/grpc-db/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddOrderReq      = pb.AddOrderReq
	AddOrderResp     = pb.AddOrderResp
	AddUserReq       = pb.AddUserReq
	AddUserResp      = pb.AddUserResp
	DelOrderReq      = pb.DelOrderReq
	DelOrderResp     = pb.DelOrderResp
	DelUserReq       = pb.DelUserReq
	DelUserResp      = pb.DelUserResp
	GetOrderByIdReq  = pb.GetOrderByIdReq
	GetOrderByIdResp = pb.GetOrderByIdResp
	GetUserByIdReq   = pb.GetUserByIdReq
	GetUserByIdResp  = pb.GetUserByIdResp
	Order            = pb.Order
	SearchOrderReq   = pb.SearchOrderReq
	SearchOrderResp  = pb.SearchOrderResp
	SearchUserReq    = pb.SearchUserReq
	SearchUserResp   = pb.SearchUserResp
	UpdateOrderReq   = pb.UpdateOrderReq
	UpdateOrderResp  = pb.UpdateOrderResp
	UpdateUserReq    = pb.UpdateUserReq
	UpdateUserResp   = pb.UpdateUserResp
	User             = pb.User

	UserOrder interface {
		// -----------------------order-----------------------
		AddOrder(ctx context.Context, in *AddOrderReq, opts ...grpc.CallOption) (*AddOrderResp, error)
		UpdateOrder(ctx context.Context, in *UpdateOrderReq, opts ...grpc.CallOption) (*UpdateOrderResp, error)
		DelOrder(ctx context.Context, in *DelOrderReq, opts ...grpc.CallOption) (*DelOrderResp, error)
		GetOrderById(ctx context.Context, in *GetOrderByIdReq, opts ...grpc.CallOption) (*GetOrderByIdResp, error)
		SearchOrder(ctx context.Context, in *SearchOrderReq, opts ...grpc.CallOption) (*SearchOrderResp, error)
		// -----------------------user-----------------------
		AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error)
		UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
		DelUser(ctx context.Context, in *DelUserReq, opts ...grpc.CallOption) (*DelUserResp, error)
		GetUserById(ctx context.Context, in *GetUserByIdReq, opts ...grpc.CallOption) (*GetUserByIdResp, error)
		SearchUser(ctx context.Context, in *SearchUserReq, opts ...grpc.CallOption) (*SearchUserResp, error)
	}

	defaultUserOrder struct {
		cli zrpc.Client
	}
)

func NewUserOrder(cli zrpc.Client) UserOrder {
	return &defaultUserOrder{
		cli: cli,
	}
}

// -----------------------order-----------------------
func (m *defaultUserOrder) AddOrder(ctx context.Context, in *AddOrderReq, opts ...grpc.CallOption) (*AddOrderResp, error) {
	client := pb.NewUserOrderClient(m.cli.Conn())
	return client.AddOrder(ctx, in, opts...)
}

func (m *defaultUserOrder) UpdateOrder(ctx context.Context, in *UpdateOrderReq, opts ...grpc.CallOption) (*UpdateOrderResp, error) {
	client := pb.NewUserOrderClient(m.cli.Conn())
	return client.UpdateOrder(ctx, in, opts...)
}

func (m *defaultUserOrder) DelOrder(ctx context.Context, in *DelOrderReq, opts ...grpc.CallOption) (*DelOrderResp, error) {
	client := pb.NewUserOrderClient(m.cli.Conn())
	return client.DelOrder(ctx, in, opts...)
}

func (m *defaultUserOrder) GetOrderById(ctx context.Context, in *GetOrderByIdReq, opts ...grpc.CallOption) (*GetOrderByIdResp, error) {
	client := pb.NewUserOrderClient(m.cli.Conn())
	return client.GetOrderById(ctx, in, opts...)
}

func (m *defaultUserOrder) SearchOrder(ctx context.Context, in *SearchOrderReq, opts ...grpc.CallOption) (*SearchOrderResp, error) {
	client := pb.NewUserOrderClient(m.cli.Conn())
	return client.SearchOrder(ctx, in, opts...)
}

// -----------------------user-----------------------
func (m *defaultUserOrder) AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error) {
	client := pb.NewUserOrderClient(m.cli.Conn())
	return client.AddUser(ctx, in, opts...)
}

func (m *defaultUserOrder) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	client := pb.NewUserOrderClient(m.cli.Conn())
	return client.UpdateUser(ctx, in, opts...)
}

func (m *defaultUserOrder) DelUser(ctx context.Context, in *DelUserReq, opts ...grpc.CallOption) (*DelUserResp, error) {
	client := pb.NewUserOrderClient(m.cli.Conn())
	return client.DelUser(ctx, in, opts...)
}

func (m *defaultUserOrder) GetUserById(ctx context.Context, in *GetUserByIdReq, opts ...grpc.CallOption) (*GetUserByIdResp, error) {
	client := pb.NewUserOrderClient(m.cli.Conn())
	return client.GetUserById(ctx, in, opts...)
}

func (m *defaultUserOrder) SearchUser(ctx context.Context, in *SearchUserReq, opts ...grpc.CallOption) (*SearchUserResp, error) {
	client := pb.NewUserOrderClient(m.cli.Conn())
	return client.SearchUser(ctx, in, opts...)
}
