// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: userOrder.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserOrderClient is the client API for UserOrder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserOrderClient interface {
	//-----------------------order-----------------------
	AddOrder(ctx context.Context, in *AddOrderReq, opts ...grpc.CallOption) (*AddOrderResp, error)
	UpdateOrder(ctx context.Context, in *UpdateOrderReq, opts ...grpc.CallOption) (*UpdateOrderResp, error)
	DelOrder(ctx context.Context, in *DelOrderReq, opts ...grpc.CallOption) (*DelOrderResp, error)
	GetOrderById(ctx context.Context, in *GetOrderByIdReq, opts ...grpc.CallOption) (*GetOrderByIdResp, error)
	SearchOrder(ctx context.Context, in *SearchOrderReq, opts ...grpc.CallOption) (*SearchOrderResp, error)
	//-----------------------user-----------------------
	AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error)
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
	DelUser(ctx context.Context, in *DelUserReq, opts ...grpc.CallOption) (*DelUserResp, error)
	GetUserById(ctx context.Context, in *GetUserByIdReq, opts ...grpc.CallOption) (*GetUserByIdResp, error)
	SearchUser(ctx context.Context, in *SearchUserReq, opts ...grpc.CallOption) (*SearchUserResp, error)
}

type userOrderClient struct {
	cc grpc.ClientConnInterface
}

func NewUserOrderClient(cc grpc.ClientConnInterface) UserOrderClient {
	return &userOrderClient{cc}
}

func (c *userOrderClient) AddOrder(ctx context.Context, in *AddOrderReq, opts ...grpc.CallOption) (*AddOrderResp, error) {
	out := new(AddOrderResp)
	err := c.cc.Invoke(ctx, "/pb.userOrder/AddOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userOrderClient) UpdateOrder(ctx context.Context, in *UpdateOrderReq, opts ...grpc.CallOption) (*UpdateOrderResp, error) {
	out := new(UpdateOrderResp)
	err := c.cc.Invoke(ctx, "/pb.userOrder/UpdateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userOrderClient) DelOrder(ctx context.Context, in *DelOrderReq, opts ...grpc.CallOption) (*DelOrderResp, error) {
	out := new(DelOrderResp)
	err := c.cc.Invoke(ctx, "/pb.userOrder/DelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userOrderClient) GetOrderById(ctx context.Context, in *GetOrderByIdReq, opts ...grpc.CallOption) (*GetOrderByIdResp, error) {
	out := new(GetOrderByIdResp)
	err := c.cc.Invoke(ctx, "/pb.userOrder/GetOrderById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userOrderClient) SearchOrder(ctx context.Context, in *SearchOrderReq, opts ...grpc.CallOption) (*SearchOrderResp, error) {
	out := new(SearchOrderResp)
	err := c.cc.Invoke(ctx, "/pb.userOrder/SearchOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userOrderClient) AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error) {
	out := new(AddUserResp)
	err := c.cc.Invoke(ctx, "/pb.userOrder/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userOrderClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	out := new(UpdateUserResp)
	err := c.cc.Invoke(ctx, "/pb.userOrder/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userOrderClient) DelUser(ctx context.Context, in *DelUserReq, opts ...grpc.CallOption) (*DelUserResp, error) {
	out := new(DelUserResp)
	err := c.cc.Invoke(ctx, "/pb.userOrder/DelUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userOrderClient) GetUserById(ctx context.Context, in *GetUserByIdReq, opts ...grpc.CallOption) (*GetUserByIdResp, error) {
	out := new(GetUserByIdResp)
	err := c.cc.Invoke(ctx, "/pb.userOrder/GetUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userOrderClient) SearchUser(ctx context.Context, in *SearchUserReq, opts ...grpc.CallOption) (*SearchUserResp, error) {
	out := new(SearchUserResp)
	err := c.cc.Invoke(ctx, "/pb.userOrder/SearchUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserOrderServer is the server API for UserOrder service.
// All implementations must embed UnimplementedUserOrderServer
// for forward compatibility
type UserOrderServer interface {
	//-----------------------order-----------------------
	AddOrder(context.Context, *AddOrderReq) (*AddOrderResp, error)
	UpdateOrder(context.Context, *UpdateOrderReq) (*UpdateOrderResp, error)
	DelOrder(context.Context, *DelOrderReq) (*DelOrderResp, error)
	GetOrderById(context.Context, *GetOrderByIdReq) (*GetOrderByIdResp, error)
	SearchOrder(context.Context, *SearchOrderReq) (*SearchOrderResp, error)
	//-----------------------user-----------------------
	AddUser(context.Context, *AddUserReq) (*AddUserResp, error)
	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserResp, error)
	DelUser(context.Context, *DelUserReq) (*DelUserResp, error)
	GetUserById(context.Context, *GetUserByIdReq) (*GetUserByIdResp, error)
	SearchUser(context.Context, *SearchUserReq) (*SearchUserResp, error)
	mustEmbedUnimplementedUserOrderServer()
}

// UnimplementedUserOrderServer must be embedded to have forward compatible implementations.
type UnimplementedUserOrderServer struct {
}

func (UnimplementedUserOrderServer) AddOrder(context.Context, *AddOrderReq) (*AddOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrder not implemented")
}
func (UnimplementedUserOrderServer) UpdateOrder(context.Context, *UpdateOrderReq) (*UpdateOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (UnimplementedUserOrderServer) DelOrder(context.Context, *DelOrderReq) (*DelOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOrder not implemented")
}
func (UnimplementedUserOrderServer) GetOrderById(context.Context, *GetOrderByIdReq) (*GetOrderByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderById not implemented")
}
func (UnimplementedUserOrderServer) SearchOrder(context.Context, *SearchOrderReq) (*SearchOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOrder not implemented")
}
func (UnimplementedUserOrderServer) AddUser(context.Context, *AddUserReq) (*AddUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedUserOrderServer) UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserOrderServer) DelUser(context.Context, *DelUserReq) (*DelUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUser not implemented")
}
func (UnimplementedUserOrderServer) GetUserById(context.Context, *GetUserByIdReq) (*GetUserByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedUserOrderServer) SearchUser(context.Context, *SearchUserReq) (*SearchUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUser not implemented")
}
func (UnimplementedUserOrderServer) mustEmbedUnimplementedUserOrderServer() {}

// UnsafeUserOrderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserOrderServer will
// result in compilation errors.
type UnsafeUserOrderServer interface {
	mustEmbedUnimplementedUserOrderServer()
}

func RegisterUserOrderServer(s grpc.ServiceRegistrar, srv UserOrderServer) {
	s.RegisterService(&UserOrder_ServiceDesc, srv)
}

func _UserOrder_AddOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserOrderServer).AddOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userOrder/AddOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserOrderServer).AddOrder(ctx, req.(*AddOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserOrder_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserOrderServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userOrder/UpdateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserOrderServer).UpdateOrder(ctx, req.(*UpdateOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserOrder_DelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserOrderServer).DelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userOrder/DelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserOrderServer).DelOrder(ctx, req.(*DelOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserOrder_GetOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserOrderServer).GetOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userOrder/GetOrderById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserOrderServer).GetOrderById(ctx, req.(*GetOrderByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserOrder_SearchOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserOrderServer).SearchOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userOrder/SearchOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserOrderServer).SearchOrder(ctx, req.(*SearchOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserOrder_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserOrderServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userOrder/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserOrderServer).AddUser(ctx, req.(*AddUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserOrder_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserOrderServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userOrder/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserOrderServer).UpdateUser(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserOrder_DelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserOrderServer).DelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userOrder/DelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserOrderServer).DelUser(ctx, req.(*DelUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserOrder_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserOrderServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userOrder/GetUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserOrderServer).GetUserById(ctx, req.(*GetUserByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserOrder_SearchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserOrderServer).SearchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.userOrder/SearchUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserOrderServer).SearchUser(ctx, req.(*SearchUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserOrder_ServiceDesc is the grpc.ServiceDesc for UserOrder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserOrder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.userOrder",
	HandlerType: (*UserOrderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOrder",
			Handler:    _UserOrder_AddOrder_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _UserOrder_UpdateOrder_Handler,
		},
		{
			MethodName: "DelOrder",
			Handler:    _UserOrder_DelOrder_Handler,
		},
		{
			MethodName: "GetOrderById",
			Handler:    _UserOrder_GetOrderById_Handler,
		},
		{
			MethodName: "SearchOrder",
			Handler:    _UserOrder_SearchOrder_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _UserOrder_AddUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserOrder_UpdateUser_Handler,
		},
		{
			MethodName: "DelUser",
			Handler:    _UserOrder_DelUser_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _UserOrder_GetUserById_Handler,
		},
		{
			MethodName: "SearchUser",
			Handler:    _UserOrder_SearchUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userOrder.proto",
}
